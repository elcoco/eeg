#!/usr/bin/python3
# -*- coding: utf-8 -*-
import pyqtgraph as pg
import pyqtgraph.exporters
from pyqtgraph.Qt import QtCore, QtGui
import numpy as np
import os

from functools import partial

from pyeeg import Config
from pyeeg import EEG
from pyeeg import Log as log
from pyeeg import DataList

import threading

import datetime
import socket
from socket import error as socket_error
import select
import time

import inspect
import re
from time import strftime

pg.mkQApp()

## Define main window class from template
path = os.path.dirname(os.path.abspath(__file__))
uiFile = os.path.join(path, 'qteeg.ui')
WindowTemplate, TemplateBaseClass = pg.Qt.loadUiType(uiFile)


class StoppableThread(object):
    def __init__(self):
        self.stopped = False
        self.paused = False


    def stop(self):
        self.stopped = True


    def pause(self):
        if self.paused:
            self.paused = False
        else:
            self.paused = True



class GetDataThread(QtCore.QThread, StoppableThread):
    sig_get_data = QtCore.pyqtSignal(object)

    def __init__(self, eeg):
        QtCore.QThread.__init__(self)
        StoppableThread.__init__(self)
        self.eeg = eeg


    def run(self):
        while not self.stopped:
            if not self.paused:
                #self.eeg.get_data()
                if not self.eeg.get_data():
                    self.sig_get_data.emit(False)
                    self.stop()
            else:
                time.sleep(0.5)



class UpdatePlot(object):
    def __init__(self, channel, datalist):
        self.channel = channel
        self.datalist = datalist


    def get_timestamp(self):
        return datetime.datetime.today()


    def setup(self):
        # Vars to keep track of frames and location of frames
        self.framecount = 0             # Stores the number of frames for every channel so we can check if it fits in the buffer
        self.last_frame = False        # last_frames is the  dict that stores the last fetched frame by channel
        self.running = False            # Make sure only one verion of update() is running

        self.fps = False                # Keep track of FPS
        self.fps_frames_count = 0
        self.fps_t_interval = 1         # The timespan over which the FPS is calculated in seconds
        self.fps_t_start = False
        self.fps_t_end = False

        buffer_size = 1000              # Initial buffer size

        # fill buffer with empty numpy array
        data = np.empty(1)

        self.fb_y = data
        self.fb_x = data


    def update(self):
        # Make sure only one version of this method is running
        if self.running: return
        self.running = True

        # Retrieve list of objects newer than last_item (which is the Data() object that was last)
        datas = self.datalist.get_last_items(self.channel, self.last_frame)

        if datas:
            # remove first lot of frames if it is the first go, this should be changed obviously
            if not self.last_frame:
                datas = datas[-1:]

            # Set last received frame in self.last_frames
            self.last_frame = datas[-1]

            ys = []
            xs = []

            for data in datas:
                ys.append(float(data.get_data()))
                d = data.get_timestamp()
                xs.append(int('{0}{1}{2}'.format(d.hour, d.minute, d.second)))

            # Update the graph with the new data, provide -> channel, chunk of data, last state, current state
            self.running = False

            ys = np.array(ys)
            xs = np.array(xs)

            # Combine the old buffer and the new data
            self.fb_y = np.append(self.fb_y, ys)
            self.fb_x = np.append(self.fb_x, xs)

            # update the framecount with the new data (numpy array length is fetched with data.shape[0]
            self.framecount += ys.shape[0]

            #fps = self.calculate_fps(len(ys))
            #if fps:
            #    self.w.setTitle('Channel {0} - FPS {1:.0f}'.format(channel, self.fps))

            return self.fb_y[:self.framecount], -self.framecount

        self.running = False


    def calculate_fps(self, n_frames):
        # Stores frames and time elapsed and updates when t_update has passed
        # List start at 0
        if not self.fps_t_start:
            self.fps_t_start = self.get_timestamp()

        t_current = self.get_timestamp()
        t_elapsed = (t_current - self.fps_t_start).total_seconds()

        if t_elapsed <= self.fps_t_interval:
            # update time not reached yet
            self.fps_frames_count += n_frames
            return False
        else:
            # update time has been reached --> change self.fps
            self.fps = self.fps_frames_count / t_elapsed

            # Reset variables
            self.fps_t_start = self.get_timestamp()
            self.fps_frames_count = 0
            return self.fps



class PlotThread(QtCore.QThread, StoppableThread):
    signals_update = {}
    signals_position = {}

    sig_update_plot1 = QtCore.pyqtSignal(object)
    sig_update_plot2 = QtCore.pyqtSignal(object)
    sig_update_plot3 = QtCore.pyqtSignal(object)
    sig_update_plot4 = QtCore.pyqtSignal(object)
    sig_update_plot5 = QtCore.pyqtSignal(object)
    sig_update_plot6 = QtCore.pyqtSignal(object)
    sig_update_plot7 = QtCore.pyqtSignal(object)
    sig_update_plot8 = QtCore.pyqtSignal(object)
    sig_update_position1 = QtCore.pyqtSignal(object)
    sig_update_position2 = QtCore.pyqtSignal(object)
    sig_update_position3 = QtCore.pyqtSignal(object)
    sig_update_position4 = QtCore.pyqtSignal(object)
    sig_update_position5 = QtCore.pyqtSignal(object)
    sig_update_position6 = QtCore.pyqtSignal(object)
    sig_update_position7 = QtCore.pyqtSignal(object)
    sig_update_position8 = QtCore.pyqtSignal(object)


    def __init__(self, datalist):
        QtCore.QThread.__init__(self)
        self.plots = {}
        StoppableThread.__init__(self)

        # Create all plot update objects and put them in dict
        for channel in range(1,8+1):
            if config.get('channel{0}'.format(channel), 'state') == 'on':
                plot = UpdatePlot(channel, datalist)
                plot.setup()
                self.plots[channel] = plot


    def send(self, sig, data):
        sig.emit(data)


    def update(self):
        if config.get('channel1', 'state') == 'on':
            retval = self.plots[1].update()
            if retval:
                self.send(self.sig_update_plot1, retval[0])
                self.send(self.sig_update_position1, retval[1])
        if config.get('channel2', 'state') == 'on':
            retval = self.plots[2].update()
            if retval:
                self.send(self.sig_update_plot2, retval[0])
                self.send(self.sig_update_position2, retval[1])
        if config.get('channel3', 'state') == 'on':
            retval = self.plots[3].update()
            if retval:
                self.send(self.sig_update_plot3, retval[0])
                self.send(self.sig_update_position3, retval[1])
        if config.get('channel4', 'state') == 'on':
            retval = self.plots[4].update()
            if retval:
                self.send(self.sig_update_plot4, retval[0])
                self.send(self.sig_update_position4, retval[1])
        if config.get('channel5', 'state') == 'on':
            retval = self.plots[5].update()
            if retval:
                self.send(self.sig_update_plot5, retval[0])
                self.send(self.sig_update_position5, retval[1])
        if config.get('channel6', 'state') == 'on':
            retval = self.plots[6].update()
            if retval:
                self.send(self.sig_update_plot6, retval[0])
                self.send(self.sig_update_position6, retval[1])
        if config.get('channel7', 'state') == 'on':
            retval = self.plots[7].update()
            if retval:
                self.send(self.sig_update_plot7, retval[0])
                self.send(self.sig_update_position7, retval[1])
        if config.get('channel8', 'state') == 'on':
            retval = self.plots[8].update()
            if retval:
                self.send(self.sig_update_plot8, retval[0])
                self.send(self.sig_update_position8, retval[1])


    def run(self):
        while not self.stopped:
            if not self.paused:
                self.update()
                #time.sleep(0.1)
                time.sleep(float(config.get('general', 'refresh')))
            else:
                time.sleep(0.5)



class ImportPlot(object):
    def __init__(self):
        self.xs = []
        self.ys = []


    def import_file(self, filename):
        datas = self.get_file(filename) 
        first = True
        for data in datas:
            if not first:
                items = data.split(',')
                self.xs.append(float(items[0]))
                self.ys.append(float(items[1]))
            first = False

        return self.xs, self.ys


    def get_file(self, filename):
        """ Get contents of a file and put every line in a list"""
        contents = []
        try:
            f = open(filename, 'r')
        except IOError as e:
            if not self.quiet:
                print('No config file found at: {0}'.format(filename))
            return False

        for line in f:
            if line:
                contents.append(self.sanitize(line))
        f.close()

        if contents:
            return contents
        return False


    def sanitize(self, data, extra_opts = []):
        """ Clean variable from newlines, leading/trailing spaces and other stuff """
        sanitize_list = [' ', '\'', '\"', '\n'] + extra_opts
        for sanitize in sanitize_list:
            data = data.strip(sanitize)
        return data



class PlotTab(object):
    # A class for creating a new tab with a plot in it
    def __init__(self, tabname, xs, ys):
        self.tabname = tabname
        xs = np.array(xs)
        ys = np.array(ys)

        self.tab = pg.GraphicsWindow()
        self.plot = self.tab.addPlot()

        self.plot.showGrid(x=True, y=True)
        self.plot.plot(xs, ys, pen='g')


    def show(self, tab_widget):
        self.tab_widget = tab_widget
        self.tab_widget.addTab(self.tab, self.tabname)


    def close_tab(self, currentIndex):
        print('>>>',currentIndex,'<<<')
        self.widget.removeTab(currentIndex)



class MainWindow(TemplateBaseClass):  
    def __init__(self):
        TemplateBaseClass.__init__(self)
        self.setWindowTitle('Pyeeg')
        
        global config
        config = Config()
        self.datalist = DataList()
        self.eeg = EEG(config, self.datalist)

        # keep track of application state (play/pause)
        self.plotting = False
        self.paused = False
        self.has_run = False

        # Some settings
        self.eeg.set_config_defaults()
        self.eeg.set_srb1()
        self.eeg.set_ref()
        
        # Create the main window
        self.ui = WindowTemplate()
        self.ui.setupUi(self)

        # Put all widgets in lists so it's easyer to itter through them
        self.checkbox_ch_enabled = [ self.ui.checkBox_ch1_enabled,
                                     self.ui.checkBox_ch2_enabled,
                                     self.ui.checkBox_ch3_enabled,
                                     self.ui.checkBox_ch4_enabled,
                                     self.ui.checkBox_ch5_enabled,
                                     self.ui.checkBox_ch6_enabled,
                                     self.ui.checkBox_ch7_enabled,
                                     self.ui.checkBox_ch8_enabled ]

        self.combobox_gain = [ self.ui.comboBox_ch1_gain,
                               self.ui.comboBox_ch2_gain,
                               self.ui.comboBox_ch3_gain,
                               self.ui.comboBox_ch4_gain,
                               self.ui.comboBox_ch5_gain,
                               self.ui.comboBox_ch6_gain,
                               self.ui.comboBox_ch7_gain,
                               self.ui.comboBox_ch8_gain ]

        self.checkbox_ch_visible = [ self.ui.checkBox_ch1_visible,
                                     self.ui.checkBox_ch2_visible,
                                     self.ui.checkBox_ch3_visible,
                                     self.ui.checkBox_ch4_visible,
                                     self.ui.checkBox_ch5_visible,
                                     self.ui.checkBox_ch6_visible,
                                     self.ui.checkBox_ch7_visible,
                                     self.ui.checkBox_ch8_visible ]

        self.pushbutton_ch_save = [ self.ui.pushButtonSave1,
                                    self.ui.pushButtonSave2,
                                    self.ui.pushButtonSave3,
                                    self.ui.pushButtonSave4,
                                    self.ui.pushButtonSave5,
                                    self.ui.pushButtonSave6,
                                    self.ui.pushButtonSave7,
                                    self.ui.pushButtonSave8 ]

        self.plots = [ self.ui.plotCh1,
                       self.ui.plotCh2,
                       self.ui.plotCh3,
                       self.ui.plotCh4,
                       self.ui.plotCh5,
                       self.ui.plotCh6,
                       self.ui.plotCh7,
                       self.ui.plotCh8 ]


        # Connect signals/slots
        for channel in range(1, 8+1):
            self.checkbox_ch_enabled[channel-1].stateChanged.connect(partial(self.on_channel_toggle, channel))
            self.combobox_gain[channel-1].activated.connect(partial(self.on_channel_gain, channel))
            self.checkbox_ch_visible[channel-1].stateChanged.connect(partial(self.on_channel_visible, channel))
            self.pushbutton_ch_save[channel-1].clicked.connect(partial(self.on_save_channel, channel))

        self.ui.pushButtonDisableAll.clicked.connect(self.on_disable_all)
        self.ui.pushButtonEnableAll.clicked.connect(self.on_enable_all)

        self.ui.actionSave_all_plots.triggered.connect(self.on_save_all_plots)
        self.ui.actionExit.triggered.connect(QtGui.qApp.quit)
        self.ui.actionImport_plot.triggered.connect(self.on_import_plot)
        self.ui.actionStart.triggered.connect(self.on_start)
        self.ui.actionStop.triggered.connect(self.on_stop)
        self.ui.actionConnect.triggered.connect(self.connect)
        self.ui.actionToggleSidebar.triggered.connect(self.on_toggle_sidebar)
        self.ui.actionQuit.triggered.connect(self.close)
        self.ui.comboBoxRefresh.currentIndexChanged.connect(self.set_refresh)
        self.ui.tabWidgetPlot.tabCloseRequested.connect(self.on_close_tab)

        # Set default states of checkboxes/comboboxes
        index = self.ui.comboBoxRefresh.findText(str(config.get('general', 'refresh')), QtCore.Qt.MatchFixedString)
        if index >= 0:
            self.ui.comboBoxRefresh.setCurrentIndex(index)

        channel = 0
        for combobox in self.combobox_gain:
            channel += 1
            index = combobox.findText(str(config.get('channel{0}'.format(str(channel)), 'gain')), QtCore.Qt.MatchFixedString)
            if index >= 0:
                combobox.setCurrentIndex(index)

        # Setup tabs
        self.ui.tabWidgetPlot.setTabsClosable(True)
        self.ui.tabWidgetPlot.setMovable(True)
        self.ui.tabWidgetPlot.tabBar().setTabButton(0, QtGui.QTabBar.RightSide,None)

        self.show()


    def set_refresh(self):
        refresh = self.ui.comboBoxRefresh.currentText()
        print(refresh)
        config.set('general', 'refresh', refresh)


    def on_channel_toggle(self, channel):
        if self.checkbox_ch_enabled[channel-1].isChecked():
            self.eeg.set_channel(channel)
            self.plots[channel-1].setHidden(False)
            self.checkbox_ch_visible[channel-1].setChecked(True)
        else:
            self.eeg.set_channel(channel, state=False)
            self.plots[channel-1].setHidden(True)
            self.checkbox_ch_visible[channel-1].setChecked(False)


    def on_channel_visible(self, channel):
        if self.checkbox_ch_visible[channel-1].isChecked():
            self.plots[channel-1].setHidden(False)
        else:
            self.plots[channel-1].setHidden(True)


    def on_channel_gain(self, channel):
        gain = self.combobox_gain[channel-1].currentText()
        self.eeg.set_gain(channel, int(gain))


    def on_disable_all(self):
        for channel in range(1,8+1):
            self.checkbox_ch_visible[channel-1].setChecked(False)
            self.checkbox_ch_enabled[channel-1].setChecked(False)
            self.plots[channel-1].setHidden(True)


    def on_enable_all(self):
        for channel in range(1,8+1):
            self.checkbox_ch_visible[channel-1].setChecked(True)
            self.checkbox_ch_enabled[channel-1].setChecked(True)
            self.plots[channel-1].setHidden(False)


    def on_save_all_plots(self):
        if self.has_run:
            dirname = QtGui.QFileDialog.getExistingDirectory(self, 'Select Directory', os.getenv("HOME", ))
            if dirname:
                for channel in range(1,8+1):
                    if config.get('channel{0}'.format(str(channel)), 'state') == 'on':
                        self.save_channel(dirname, channel)
                self.ui.statusbar.showMessage('Saved all channels to: {0}'.format(dirname))
        else:
            self.ui.statusbar.showMessage('Can\'t save, no data yet')



    def on_save_channel(self, channel):
        if self.has_run:
            dirname = QtGui.QFileDialog.getExistingDirectory(self, 'Select Directory', os.getenv("HOME", ))
            if dirname:
                self.save_channel(dirname, channel)
                self.ui.statusbar.showMessage('Saved channel to: {0}/channel{1}.csv'.format(dirname,channel))
        else:
            self.ui.statusbar.showMessage('Can\'t save, no data yet')


    def save_channel(self, dirname, channel):
        # TODO Save all channels from data and not from exporter (exporter limits to view)
        exporter = pg.exporters.CSVExporter(self.plots[channel-1].plotItem)
        exporter.export('{0}/channel{1}.csv'.format(dirname,channel))


    def on_start(self):
        if self.plotting and not self.paused:
            for thread in self.threads:
                self.ui.statusbar.showMessage('Paused')
                thread.pause()
                self.eeg.send_stop()
                self.paused = True
            return
        elif self.plotting and self.paused:
            for thread in self.threads:
                self.ui.statusbar.showMessage('Running')
                self.eeg.send_start()
                thread.pause()
                self.paused = False
            return

        # Clear all plots
        for channel in range(1,8+1): self.clear_plot(channel)
            
        #self.connect()
        if not self.connect():
            return False

        self.ui.statusbar.showMessage('Running')
        self.plotting = True
        self.has_run = True

        self.curves = {}

        self.eeg.send_settings()
        self.eeg.send_start()

        self.threads = []
        data_thread = GetDataThread(self.eeg)
        self.threads.append(data_thread)
        data_thread.start()

        plot_thread = PlotThread(self.datalist)
        plot_thread.start()
        self.threads.append(plot_thread)

        self.plot_update = [ plot_thread.sig_update_plot1,
                             plot_thread.sig_update_plot2,
                             plot_thread.sig_update_plot3,
                             plot_thread.sig_update_plot4,
                             plot_thread.sig_update_plot5,
                             plot_thread.sig_update_plot6,
                             plot_thread.sig_update_plot7,
                             plot_thread.sig_update_plot8 ]

        self.update_position = [ plot_thread.sig_update_position1,
                                 plot_thread.sig_update_position2,
                                 plot_thread.sig_update_position3,
                                 plot_thread.sig_update_position4,
                                 plot_thread.sig_update_position5,
                                 plot_thread.sig_update_position6,
                                 plot_thread.sig_update_position7,
                                 plot_thread.sig_update_position8 ]

        data_thread.sig_get_data.connect(self.on_no_data)

        for channel in range(1,8+1):
            self.plot_update[channel-1].connect(partial(self.on_update_plot, channel))
            self.update_position[channel-1].connect(partial(self.on_update_position, channel))
        
        self.setup_plots()


    def setup_plots(self):
        # Must be set before creating any widgets
        pg.setConfigOption('background', 0.1)

        for channel in range(1,8+1):
            self.plots[channel-1].setRange(xRange=[-1000, 0])
            self.plots[channel-1].setLimits(xMax=0)
            self.plots[channel-1].setClipToView(True)
            self.plots[channel-1].setDownsampling(mode='peak')
            self.plots[channel-1].showGrid(x=True, y=True)
            #self.plots[channel-1].hideAxis('bottom')
            self.curves[channel] = self.plots[channel-1].plot(pen=channel)


    def on_update_plot(self, channel, data):
        self.curves[channel].setData(data)


    def on_update_position(self, channel, position):
        self.curves[channel].setPos(position, 0)


    def on_no_data(self, data):
        # This method is called if there is a connection error in the data thread
        # This if is needed because there will also be an error collecting data if the stop button is pressed
        if self.plotting:
            print('No data')
            self.ui.statusbar.showMessage('There was a problem connecting to the server')
            self.on_stop(show_message=False)


    def on_stop(self, show_message=True):
        if self.plotting:
            if show_message:
                self.ui.statusbar.showMessage('Stopped')
            self.eeg.send_stop()
            for thread in self.threads:
                thread.stop()

            self.eeg.disconnect()
            self.plotting = False


    def connect(self):
        if self.eeg.connect():
            self.ui.statusbar.showMessage('Connected to server')
            return True
        else:
            self.ui.statusbar.showMessage('Could not connect to server')
            return False


    def on_import_plot(self):
        filenames = QtGui.QFileDialog.getOpenFileNames(self, 'Open file', os.getenv("HOME"), filter='*.csv')
        for filename in filenames:
            tabname = os.path.basename(filename).split('.')[0]
            plotfile = ImportPlot()
            xs,ys = plotfile.import_file(filename)

            plot = PlotTab(tabname, xs, ys)
            plot.show(self.ui.tabWidgetPlot)


    def on_close_tab(self, currentIndex):
        self.ui.tabWidgetPlot.removeTab(currentIndex)


    def clear_plot(self, channel):
        self.plots[channel-1].clear()


    def on_toggle_sidebar(self):
        if self.ui.dockWidgetChannelSettings.isHidden():
            self.ui.dockWidgetChannelSettings.setHidden(False)
            self.ui.dockWidgetVisibleChannels.setHidden(False)
        else:
            self.ui.dockWidgetChannelSettings.setHidden(True)
            self.ui.dockWidgetVisibleChannels.setHidden(True)



win = MainWindow()

if __name__ == '__main__':
    import sys
    if (sys.flags.interactive != 1) or not hasattr(QtCore, 'PYQT_VERSION'):
        QtGui.QApplication.instance().exec_()
